<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从国赛想到的一些php绕过注释符trick</title>
      <link href="/2024/07/14/%E4%BB%8E%E5%9B%BD%E8%B5%9B%E6%83%B3%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9Bphp%E7%BB%95%E8%BF%87%E6%B3%A8%E9%87%8A%E7%AC%A6trick/"/>
      <url>/2024/07/14/%E4%BB%8E%E5%9B%BD%E8%B5%9B%E6%83%B3%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9Bphp%E7%BB%95%E8%BF%87%E6%B3%A8%E9%87%8A%E7%AC%A6trick/</url>
      
        <content type="html"><![CDATA[<h1 id="从国赛衍生出来的一些php绕过注释符trick"><a href="#从国赛衍生出来的一些php绕过注释符trick" class="headerlink" title="从国赛衍生出来的一些php绕过注释符trick"></a>从国赛衍生出来的一些php绕过注释符trick</h1><p>首先是在很早之前我在XYCTF出过的一道题，<code>牢牢记住，逝者为大</code>，题目代码是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面的代码在限制字数内能执行代码，当时我给出的解是用换行符进行绕过也就是<code>%0a</code></p><p>在比赛比完之后我就想还有没有其他绕过的方式…</p><h2 id="ciscn2024华东南国赛WEB-粗心的程序员"><a href="#ciscn2024华东南国赛WEB-粗心的程序员" class="headerlink" title="ciscn2024华东南国赛WEB-粗心的程序员"></a>ciscn2024华东南国赛WEB-粗心的程序员</h2><p>这题在扫出文件泄露之后，关键的漏洞代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;default_info_auto_recovery.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$p</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>]?:<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\?|php|:/i&quot;</span>,<span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d h:i:s&#x27;</span>, <span class="title function_ invoke__">time</span>());</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> &amp;&amp; <span class="variable">$id</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello,&quot;</span>.<span class="string">&quot;<span class="subst">$username</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;//登陆时间<span class="subst">$time</span>,<span class="subst">$username</span> <span class="subst">$p</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;config.php&quot;</span>,<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;config.php&quot;</span>).<span class="variable">$str</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NO ACCESS&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们要绕过的地方就在这里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;//登陆时间<span class="subst">$time</span>,<span class="subst">$username</span> <span class="subst">$p</span>&quot;</span>;</span><br></pre></td></tr></table></figure><p>我们能看到<code>\n</code>被过滤了，那么我们还有什么其他办法能绕呢 </p><h2 id="方法1-r"><a href="#方法1-r" class="headerlink" title="方法1 \r"></a>方法1 \r</h2><p><code>\r</code> (回车) 和 <code>\n</code> (换行) 是在计算机中用于都表示行终止符的控制字符。</p><ol><li><strong><code>\n</code></strong>:<ul><li>在 Linux 以及编程语言中，<code>\n</code> 表示行的结束，在这些系统中，<code>\n</code> 会将光标移动到下一行的开头。</li></ul></li><li><strong><code>\r</code></strong>:<ul><li>在早期的系统和编程语言中，<code>\r</code> 表示将光标移到当前行的开头，而不移动到下一行。</li><li>在 Windows 系统中，行终止符通常由 <code>\r\n</code> 组合表示。<code>\r</code> 使光标回到行首，<code>\n</code> 将光标移动到下一行。</li></ul></li></ol><p>那么假设我们有这么一串字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello \rWorld</span><br></pre></td></tr></table></figure><p>在大多数现代环境中，回显则会是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">World</span><br></pre></td></tr></table></figure><p>因为 \r 将光标移回行首，随后 World 覆盖了 Hello</p><p>我们在python中进行实验发现是符合的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;hello \rworld&quot;</span>) </span><br><span class="line">world</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>而在我们神奇的php中呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello \rworld&quot;</span>;</span><br></pre></td></tr></table></figure><p>则是回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello </span><br><span class="line">world</span><br></pre></td></tr></table></figure><p>那么我们在php中我们便可以用\r代替换行符</p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2 ?&gt;"></a>方法2 ?&gt;</h2><p>某一天我在写wp的时候，准备把wp的代码写上注释再跑一遍</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;Pz48P3BocCBwaHBpbmZvKCk7Pz4=&quot;</span>));</span><br><span class="line"><span class="comment">//?&gt;&lt;?php phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><p>发现phpinfo();运行了两次，同时在vscode里面，注释后面的代码是高亮状态，在注释后面的字符为什么会被解析执行呢</p><p>简单测试后了解到了</p><p>PHP解析器在处理注释时并没有完全忽略注释内容，而是会在注释内容中寻找特定的字符序列，例如 <code>?&gt;</code>。这是因为PHP解析器在扫描代码时，会优先处理PHP标签的打开和关闭，这些标签的优先级高于注释的处理</p><p>那么我们就可以用这个方法闭合掉前面的注释符然后再开一个新的标签进行执行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> php </tag>
            
            <tag> trick </tag>
            
            <tag> eval </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
